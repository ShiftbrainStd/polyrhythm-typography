@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "sass:meta";

@use "defaults" as vars;

/// Reference breakpoints
/// @type Map
$mq-breakpoints: vars.$breakpoints !default;

/// Reference typeface.
/// @type Map
/// @prop {list} $typeface[id].family - List of font family strings
/// @prop {string} $typeface[id].style - `font-style` value
/// @prop {string} $typeface[id].weight - `font-weight` value
$typefaces: vars.$typefaces !default;

/// Reference font sizes
/// @type Map
$font-sizes: vars.$font-sizes !default;

/// Reference line heights
/// @type Map
$line-heights: vars.$line-heights !default;

@use "mq" as * with ($breakpoints: $mq-breakpoints);

@use "typescale" with ($font-sizes: $font-sizes, $line-heights: $line-heights );

/// Outputs a set of text styles from a configuration map
/// @param {map} $settings Settings map. See the example for all the supported properties.
/// @param {string} $settings.typeface - Typeface id as defined in `$typefaces`
/// @param {list} $settings.sizes - A list containing a modular value for the font size and its line-height as defined in `$font-sizes`
/// @param {string} $settings.case - Font case. Supported values are `"all-lowercase"`, `"all-caps"`, `"small-caps"`, `"all-small-caps"`
/// @param {number} $settings.tracking - Letterspacing multiplier
/// @param {list} $settings.features - List of `font-feature-settings` values
/// @param {map} $settings.md - Breakpoint modifiers settings. Each modifier is identified by the breakpoint id in `$mq-breakpoints`
/// @example scss
///   $textstyle-body: (
///     typeface: "serif",
///     sizes: (0, 3),
///     tracking: 50,
///     features: ("onum"),
///     breakpoints: (
///       md: (
///         // change the font size at md
///         sizes: (2, 3)
///       )
///     )
///   );
///   @include textstyle($textstyle-body);
///
@mixin textstyle($settings) {
  // Typeface
  @if map.has-key($settings, "typeface") {
    $typeface: map.get($typefaces, map.get($settings, "typeface"));

    @if $typeface {
      font-family: map.get($typeface, "family");
      font-style: map.get($typeface, "style");
      font-weight: map.get($typeface, "weight");
    }
  }

  // Font size and line height
  @if map.has-key($settings, "sizes") {
    @include typescale.sizes(map.get($settings, "sizes"));
  }

  // Tracking
  @if map.has-key($settings, "tracking") {
    letter-spacing: 0.001em * map.get($settings, "tracking");
  }

  // Letter case
  @if map.has-key($settings, "case") {
    $case: map.get($settings, "case");

    @if $case == "all-lowercase" {
      text-transform: lowercase;
    } @else if $case == "all-caps" {
      text-transform: uppercase;
    } @else if $case == "small-caps" {
      text-transform: uppercase;

      @supports (font-variant-caps: "small-caps") {
        font-variant-caps: small-caps;
        text-transform: none;
      }
    } @else if $case == "all-small-caps" {
      text-transform: uppercase;

      @supports (font-variant-caps: small-caps) {
        font-variant-caps: small-caps;
        text-transform: lowercase;
      }
    }
  }

  // OpenType features
  @if map.has-key($settings, "features") {
    $features: ();

    @each $feature in map.get($settings, "features") {
      $features: list.append(
        $features,
        string.quote($feature),
        $separator: comma
      );

      @if $feature == "palt" {
        font-kerning: normal;
      }
    }

    font-feature-settings: $features;
  }

  // Breakpoints
  // Depends on _mq.scss
  @if map.has-key($settings, "breakpoints") {
    @each $breakpoint, $settings in map.get($settings, "breakpoints") {
      @include mq($breakpoint) {
        @include textstyle($settings);
      }
    }
  }
}
